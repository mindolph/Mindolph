<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <parent>
        <artifactId>mindolph</artifactId>
        <groupId>com.mindolph</groupId>
        <version>1.12.11</version>
    </parent>
    <modelVersion>4.0.0</modelVersion>

    <artifactId>mindolph-desktop</artifactId>
    <description>
        Personal knowledge management tool based on Mind Map, Markdown etc.&lt;br/&gt;website:https://github.com/mindolph/Mindolph&lt;br/&gt;email: mindolph.com@gmail.com
    </description>

    <properties>
        <main-class>com.mindolph.desktop.Launcher</main-class>
        <app.name>Mindolph</app.name>
        <app.version>1.12.11</app.version>
        <jvm.modules>java.naming,java.logging,javafx.graphics,javafx.controls,javafx.fxml,javafx.swing,javafx.web,jdk.crypto.ec</jvm.modules>
        <app.vendor>Mindolph Team</app.vendor>
        <logback.config>-Dlogback.configurationFile=logback-prod.xml</logback.config>
        <app.arg.disable.reopen>-Ddisable-reopen=true</app.arg.disable.reopen>
    </properties>

    <dependencies>
        <dependency>
            <groupId>com.mindolph</groupId>
            <artifactId>mindolph-fx</artifactId>
            <version>${project.version}</version>
        </dependency>
    </dependencies>

    <build>
        <resources>
            <resource>
                <!-- Here we are processing the platform-specific jpackage command files, adding in Maven
                 properties for configuration. -->
                <directory>${project.basedir}/src/packaging</directory>
                <filtering>true</filtering>
                <targetPath>${project.build.directory}/packaging</targetPath>
            </resource>
            <!-- Add the default resource path back in - by overriding above it disables the default -->
            <resource>
                <directory>${project.basedir}/src/main/resources</directory>
            </resource>
        </resources>
        <plugins>
            <plugin>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>3.14.0</version>
                <configuration>
                    <source>${maven.compiler.source}</source>
                    <target>${maven.compiler.target}</target>
                    <forceJavacCompilerUse/>
                </configuration>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-shade-plugin</artifactId>
                <version>3.6.0</version>
                <configuration>
                    <!-- put your configurations here -->
                </configuration>
                <executions>
                    <execution>
                        <phase>package</phase>
                        <goals>
                            <goal>shade</goal>
                        </goals>
                        <configuration>
                            <shadedArtifactAttached>true</shadedArtifactAttached>
                            <finalName>Mindolph-${project.version}</finalName>
                            <transformers>
                                <transformer
                                        implementation="org.apache.maven.plugins.shade.resource.ManifestResourceTransformer">
                                    <mainClass>${main-class}</mainClass>
                                </transformer>
                                <!--                                <transformer-->
                                <!--                                        implementation="org.apache.maven.plugins.shade.resource.DontIncludeResourceTransformer">-->
                                <!--                                    <resources>-->
                                <!--                                        <resource>.txt</resource>-->
                                <!--                                        <resource>LICENSE</resource>-->
                                <!--                                        <resource>*.dylib</resource>-->
                                <!--                                    </resources>-->
                                <!--                                </transformer>-->
                            </transformers>
                            <filters>
                                <filter>
                                    <artifact>*.*</artifact>
                                    <excludes>
                                        <exclude>*.dylib</exclude>
                                        <exclude>*.so</exclude>
                                        <exclude>*.dll</exclude>
                                        <exclude>*.txt</exclude>
                                        <exclude>*.md</exclude>
                                        <exclude>AUTHORS</exclude>
                                        <exclude>LICENSE</exclude>
                                        <exclude>META-INF/*.txt</exclude>
                                        <exclude>META-INF/LICENSE*</exclude>
                                        <exclude>META-INF/*LICENSE</exclude>
                                        <exclude>META-INF/licenses/**</exclude>
                                        <exclude>META-INF/LGPL2.1</exclude>
                                        <exclude>META-INF/AL2.0</exclude>
                                    </excludes>
                                </filter>
                            </filters>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <!-- Put the application jar generated by the project into the dependency folder - the default folder
                for the maven-dependency-plugin output. -->
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-jar-plugin</artifactId>
                <version>3.4.2</version>
                <configuration>
                    <outputDirectory>${project.build.directory}/dependency</outputDirectory>
                    <finalName>${project.build.finalName}</finalName>
                    <archive>
                        <manifest>
                            <addDefaultImplementationEntries>true</addDefaultImplementationEntries>
                            <addDefaultSpecificationEntries>true</addDefaultSpecificationEntries>
                        </manifest>
                    </archive>
                </configuration>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-dependency-plugin</artifactId>
                <version>3.8.1</version>
                <executions>
                    <execution>
                        <id>show-dependencies</id>
                        <phase>package</phase>
                        <goals>
                            <goal>tree</goal>
                        </goals>
                    </execution>
                    <execution>
                        <!-- This copies all of the jar files declared by the Maven build into a single directory.
                        This makes it easy to assemble the final installer package -->
                        <id>copy-dependencies</id>
                        <phase>package</phase>
                        <goals>
                            <goal>copy-dependencies</goal>
                        </goals>
                        <configuration>
                            <!--only necessary jars to copy -->
                            <includeScope>compile</includeScope>
                            <!-- The JavaFX libraries are bundled into the custom JVM, so we don't want to duplicate
                            them in the bundled app and installer. This command skips all the JavaFX by groupId. -->
                            <excludeGroupIds>org.openjfx</excludeGroupIds>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <!-- Plugin to make working with JavaFX nicer. See https://github.com/openjfx/javafx-maven-plugin -->
                <groupId>org.openjfx</groupId>
                <artifactId>javafx-maven-plugin</artifactId>
                <version>0.0.8</version>
                <configuration>
                    <mainClass>${main-class}</mainClass>
                </configuration>
            </plugin>
            <plugin>
                <!-- https://github.com/wiverson/jtoolprovider-plugin -->
                <groupId>io.github.wiverson</groupId>
                <artifactId>jtoolprovider-plugin</artifactId>
                <version>1.0.34</version>
                <executions>
                    <!-- This command runs jlink, generating a custom JVM by combining the JavaFX modules bundled in
                    this project with the JDK modules. -->
                    <execution>
                        <id>jlink</id>
                        <phase>install</phase>
                        <goals>
                            <goal>java-tool</goal>
                        </goals>
                        <configuration>
                            <toolName>jlink</toolName>
                            <removeDirectories>${project.build.directory}/jvm-image/</removeDirectories>
                            <modulePath>${jfx_module_path}</modulePath>
                            <addModules>${jvm.modules}</addModules>
                            <output>${project.build.directory}/jvm-image</output>
                            <args>
                                <arg>--strip-native-commands</arg>
                                <arg>--no-header-files</arg>
                                <arg>--strip-debug</arg>
                                <arg>--no-man-pages</arg>
                                <arg>--compress=2</arg>
                            </args>
                        </configuration>
                    </execution>
                    <!-- The command that actually generates the installer. The options for each platform
                    are found the /src/packaging directory. These files are copied into the target directory by
                    the Maven resources plugin, which does the filtering to replace the original values with
                    the actual Maven properties.

                    https://github.com/wiverson/jtoolprovider-plugin/blob/main/java-tool-doc.md
                    -->
                    <execution>
                        <id>jpackage</id>
                        <phase>install</phase>
                        <goals>
                            <goal>java-tool</goal>
                        </goals>
                        <configuration>
                            <toolName>jpackage</toolName>
                            <removeDirectories>${project.build.directory}/installer-work</removeDirectories>
                            <args>@${project.build.directory}/packaging/${platform}-jpackage.txt</args>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
        </plugins>
    </build>
</project>